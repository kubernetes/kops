apiVersion: kops.k8s.io/v1alpha2
kind: Cluster
metadata:
  creationTimestamp: "2016-12-10T22:42:27Z"
  name: minimal-warmpool.example.com
spec:
  api:
    dns: {}
  authorization:
    alwaysAllow: {}
  channel: stable
  cloudConfig:
    awsEBSCSIDriver:
      version: v1.33.0
    manageStorageClasses: true
  cloudControllerManager:
    allocateNodeCIDRs: true
    clusterCIDR: 100.96.0.0/11
    clusterName: minimal-warmpool.example.com
    configureCloudRoutes: false
    image: registry.k8s.io/provider-aws/cloud-controller-manager:v1.31.0
    leaderElection:
      leaderElect: true
  cloudProvider: aws
  clusterDNSDomain: cluster.local
  configBase: memfs://clusters.example.com/minimal-warmpool.example.com
  containerd:
    logLevel: info
    runc:
      version: 1.1.14
    version: 1.7.22
  dnsZone: Z1AFAKE1ZON3YO
  etcdClusters:
  - backups:
      backupStore: memfs://clusters.example.com/minimal-warmpool.example.com/backups/etcd/main
    etcdMembers:
    - instanceGroup: master-us-test-1a
      name: us-test-1a
    manager:
      backupRetentionDays: 90
    name: main
    version: 3.5.17
  - backups:
      backupStore: memfs://clusters.example.com/minimal-warmpool.example.com/backups/etcd/events
    etcdMembers:
    - instanceGroup: master-us-test-1a
      name: us-test-1a
    manager:
      backupRetentionDays: 90
    name: events
    version: 3.5.17
  externalDns:
    provider: dns-controller
  iam:
    legacy: false
  keyStore: memfs://clusters.example.com/minimal-warmpool.example.com/pki
  kubeAPIServer:
    allowPrivileged: true
    anonymousAuth: false
    apiAudiences:
    - kubernetes.svc.default
    apiServerCount: 1
    authorizationMode: AlwaysAllow
    bindAddress: 0.0.0.0
    cloudProvider: external
    enableAdmissionPlugins:
    - NamespaceLifecycle
    - LimitRanger
    - ServiceAccount
    - DefaultStorageClass
    - DefaultTolerationSeconds
    - MutatingAdmissionWebhook
    - ValidatingAdmissionWebhook
    - NodeRestriction
    - ResourceQuota
    etcdServers:
    - https://127.0.0.1:4001
    etcdServersOverrides:
    - /events#https://127.0.0.1:4002
    image: registry.k8s.io/kube-apiserver:v1.32.0
    kubeletPreferredAddressTypes:
    - InternalIP
    - Hostname
    - ExternalIP
    logLevel: 2
    requestheaderAllowedNames:
    - aggregator
    requestheaderExtraHeaderPrefixes:
    - X-Remote-Extra-
    requestheaderGroupHeaders:
    - X-Remote-Group
    requestheaderUsernameHeaders:
    - X-Remote-User
    securePort: 443
    serviceAccountIssuer: https://api.internal.minimal-warmpool.example.com
    serviceAccountJWKSURI: https://api.internal.minimal-warmpool.example.com/openid/v1/jwks
    serviceClusterIPRange: 100.64.0.0/13
    storageBackend: etcd3
  kubeControllerManager:
    allocateNodeCIDRs: true
    attachDetachReconcileSyncPeriod: 1m0s
    cloudProvider: external
    clusterCIDR: 100.96.0.0/11
    clusterName: minimal-warmpool.example.com
    configureCloudRoutes: false
    image: registry.k8s.io/kube-controller-manager:v1.32.0
    leaderElection:
      leaderElect: true
    logLevel: 2
    useServiceAccountCredentials: true
  kubeDNS:
    cacheMaxConcurrent: 150
    cacheMaxSize: 1000
    cpuRequest: 100m
    domain: cluster.local
    memoryLimit: 170Mi
    memoryRequest: 70Mi
    nodeLocalDNS:
      cpuRequest: 25m
      enabled: false
      image: registry.k8s.io/dns/k8s-dns-node-cache:1.23.0
      memoryRequest: 5Mi
    provider: CoreDNS
    serverIP: 100.64.0.10
  kubeProxy:
    clusterCIDR: 100.96.0.0/11
    cpuRequest: 100m
    image: registry.k8s.io/kube-proxy:v1.32.0
    logLevel: 2
  kubeScheduler:
    image: registry.k8s.io/kube-scheduler:v1.32.0
    leaderElection:
      leaderElect: true
    logLevel: 2
  kubelet:
    anonymousAuth: false
    cgroupDriver: systemd
    cgroupRoot: /
    cloudProvider: external
    clusterDNS: 100.64.0.10
    clusterDomain: cluster.local
    enableDebuggingHandlers: true
    evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
    kubeconfigPath: /var/lib/kubelet/kubeconfig
    logLevel: 2
    podInfraContainerImage: registry.k8s.io/pause:3.9
    podManifestPath: /etc/kubernetes/manifests
    protectKernelDefaults: true
    registerSchedulable: true
    shutdownGracePeriod: 30s
    shutdownGracePeriodCriticalPods: 10s
  kubernetesApiAccess:
  - 0.0.0.0/0
  kubernetesVersion: 1.32.0
  masterKubelet:
    anonymousAuth: false
    cgroupDriver: systemd
    cgroupRoot: /
    cloudProvider: external
    clusterDNS: 100.64.0.10
    clusterDomain: cluster.local
    enableDebuggingHandlers: true
    evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
    kubeconfigPath: /var/lib/kubelet/kubeconfig
    logLevel: 2
    podInfraContainerImage: registry.k8s.io/pause:3.9
    podManifestPath: /etc/kubernetes/manifests
    protectKernelDefaults: true
    registerSchedulable: true
    shutdownGracePeriod: 30s
    shutdownGracePeriodCriticalPods: 10s
  masterPublicName: api.minimal-warmpool.example.com
  networkCIDR: 172.20.0.0/16
  networking:
    cilium:
      agentPrometheusPort: 9090
      bpfCTGlobalAnyMax: 262144
      bpfCTGlobalTCPMax: 524288
      bpfLBAlgorithm: random
      bpfLBMaglevTableSize: "16381"
      bpfLBMapMax: 65536
      bpfNATGlobalMax: 524288
      bpfNeighGlobalMax: 524288
      bpfPolicyMapMax: 16384
      clusterName: default
      cpuRequest: 25m
      disableCNPStatusUpdates: true
      disableMasquerade: false
      enableBPFMasquerade: false
      enableEndpointHealthChecking: true
      enableL7Proxy: true
      enableLocalRedirectPolicy: true
      enableRemoteNodeIdentity: true
      enableUnreachableRoutes: false
      hubble:
        enabled: false
      identityAllocationMode: crd
      identityChangeGracePeriod: 5s
      ingress:
        enabled: false
      ipam: kubernetes
      memoryRequest: 128Mi
      monitorAggregation: medium
      sidecarIstioProxyImage: cilium/istio_proxy
      toFqdnsDnsRejectResponseCode: refused
      tunnel: vxlan
      version: v1.16.3
  nodeTerminationHandler:
    cpuRequest: 50m
    deleteSQSMsgIfNodeNotFound: false
    enableRebalanceDraining: false
    enableRebalanceMonitoring: false
    enableScheduledEventDraining: true
    enableSpotInterruptionDraining: true
    enabled: true
    excludeFromLoadBalancers: true
    managedASGTag: aws-node-termination-handler/managed
    memoryRequest: 64Mi
    podTerminationGracePeriod: -1
    prometheusEnable: false
    taintNode: false
    version: v1.22.0
  nonMasqueradeCIDR: 100.64.0.0/10
  podCIDR: 100.96.0.0/11
  secretStore: memfs://clusters.example.com/minimal-warmpool.example.com/secrets
  serviceClusterIPRange: 100.64.0.0/13
  sshAccess:
  - 0.0.0.0/0
  subnets:
  - cidr: 172.20.32.0/19
    name: us-test-1a
    type: Public
    zone: us-test-1a
  topology:
    dns:
      type: Public
  warmPool:
    enableLifecycleHook: true
    maxSize: 1
