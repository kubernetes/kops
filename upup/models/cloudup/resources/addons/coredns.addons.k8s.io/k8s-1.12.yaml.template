# Source: https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
      kubernetes.io/cluster-service: "true"
      k8s-addon: coredns.addons.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    k8s-addon: coredns.addons.k8s.io
  name: system:coredns
rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    - pods
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    k8s-addon: coredns.addons.k8s.io
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
      addonmanager.kubernetes.io/mode: EnsureExists
data:
  Corefile: |
  {{- if kubeDNS.ExternalCoreFile }}
{{ kubeDNS.ExternalCoreFile | indent 4 }}
  {{- else }}
    .:53 {
        errors
        health {
          lameduck 10s
        }
        ready
        kubernetes {{ kubeDNS.Domain }}. in-addr.arpa ip6.arpa {
          pods insecure
          fallthrough in-addr.arpa ip6.arpa
          ttl 30
        }
    {{- if not PublishesDNSRecords }}
        hosts /rootfs/etc/hosts {{ ClusterDNSDomain }} {
          ttl 30
          fallthrough
        }
    {{- end }}
        prometheus :9153
        forward . {{ or (join " " kubeDNS.UpstreamNameservers) "/etc/resolv.conf" }} {
          max_concurrent 1000
        }
        cache 30
        loop
        reload
        loadbalance
        {{- if IsIPv6Only }}
        dns64
        {{- end }}
    }
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/name: "CoreDNS"
    k8s-addon: coredns.addons.k8s.io
    kubernetes.io/cluster-service: "true"
spec:
  # replicas: not specified here:
  # 1. Default is 1.
  # 2. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 10%
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      {{- if kubeDNS.PodAnnotations }}
      annotations:
        {{- range $key, $value := kubeDNS.PodAnnotations }}
        {{ $key }}: "{{ $value }}"
        {{- end }}
      {{- end }}
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      tolerations:
        {{- if kubeDNS.Tolerations }}
{{ ToYAML .kubeDNS.Tolerations | indent 8 }}
        {{- else }}
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        {{- end }}
        {{- if IsControlPlaneMode }}
        - key: node-role.kubernetes.io/master
          operator: Exists
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
        {{- end }}
      nodeSelector:
        kubernetes.io/os: linux
{{- if .kubeDNS.Affinity }}
      affinity:
{{ ToYAML .kubeDNS.Affinity | indent 8 }}
{{- end }}
      topologySpreadConstraints:
{{- if ne GetCloudProvider "metal" }}
      # Metal provider doesn't add the "topology.kubernetes.io/zone" label
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            k8s-app: kube-dns
{{- end }}
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            k8s-app: kube-dns
      containers:
      - name: coredns
        image: {{ if kubeDNS.CoreDNSImage }}{{ kubeDNS.CoreDNSImage }}{{ else }}registry.k8s.io/coredns/coredns:v1.12.4{{ end }}
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: {{ kubeDNS.MemoryLimit }}
          requests:
            cpu: {{ kubeDNS.CPURequest }}
            memory: {{ kubeDNS.MemoryRequest }}
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
          readOnly: true
{{- if not PublishesDNSRecords }}
        - name: etc-hosts
          mountPath: /rootfs/etc/hosts
          readOnly: true
{{- end }}
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
{{ if ContainerdSELinuxEnabled }}
          seLinuxOptions:
            type: spc_t
            level: s0
{{ end }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 1
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns
{{- if not PublishesDNSRecords }}
        - name: etc-hosts
          hostPath:
            path: /etc/hosts
            type: File
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
  labels:
    k8s-addon: coredns.addons.k8s.io
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
  # Without this resourceVersion value, an update of the Service between versions will yield:
  #   Service "kube-dns" is invalid: metadata.resourceVersion: Invalid value: "": must be specified for an update
  resourceVersion: "0"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: {{ kubeDNS.ServerIP }}
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  - name: metrics
    port: 9153
    protocol: TCP
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kube-dns
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: kube-dns
  maxUnavailable: 50%
---

# CoreDNS Autoscaler
# Source: https://github.com/kubernetes-sigs/cluster-proportional-autoscaler/tree/master/
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: coredns.addons.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-addon: coredns.addons.k8s.io
  name: coredns-autoscaler
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list","watch"]
  - apiGroups: [""]
    resources: ["replicationcontrollers/scale"]
    verbs: ["get", "update"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments/scale", "replicasets/scale"]
    verbs: ["get", "update"]
# Remove the configmaps rule once below issue is fixed:
# kubernetes-incubator/cluster-proportional-autoscaler#16
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-addon: coredns.addons.k8s.io
  name: coredns-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: coredns-autoscaler
subjects:
- kind: ServiceAccount
  name: coredns-autoscaler
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: coredns.addons.k8s.io
    k8s-app: coredns-autoscaler
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      k8s-app: coredns-autoscaler
  template:
    metadata:
      labels:
        k8s-app: coredns-autoscaler
    spec:
      containers:
      - name: autoscaler
        image: {{ if kubeDNS.CPAImage }}{{ kubeDNS.CPAImage }}{{ else }}registry.k8s.io/cpa/cluster-proportional-autoscaler:v1.9.0{{ end }}
        resources:
            requests:
                cpu: "20m"
                memory: "10Mi"
        command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=coredns-autoscaler
          - --target=Deployment/coredns
          # When cluster is using large nodes(with more cores), "coresPerReplica" should dominate.
          # If using small nodes, "nodesPerReplica" should dominate.
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true}}
          - --logtostderr=true
          - --v=2
      {{- if not IsControlPlaneMode }}
      priorityClassName: system-cluster-critical
      {{- end }}
      tolerations:
        {{- if kubeDNS.Tolerations }}
{{ ToYAML .kubeDNS.Tolerations | indent 8 }}
        {{- else }}
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        {{- end }}
      serviceAccountName: coredns-autoscaler
      nodeSelector:
        kubernetes.io/os: linux
{{- if .kubeDNS.Affinity }}
      affinity:
{{ ToYAML .kubeDNS.Affinity | indent 8 }}
{{- end }}
---
