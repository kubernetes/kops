// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AssociationComplianceSeverity string

// Enum values for AssociationComplianceSeverity
const (
	AssociationComplianceSeverityCritical    AssociationComplianceSeverity = "CRITICAL"
	AssociationComplianceSeverityHigh        AssociationComplianceSeverity = "HIGH"
	AssociationComplianceSeverityMedium      AssociationComplianceSeverity = "MEDIUM"
	AssociationComplianceSeverityLow         AssociationComplianceSeverity = "LOW"
	AssociationComplianceSeverityUnspecified AssociationComplianceSeverity = "UNSPECIFIED"
)

// Values returns all known values for AssociationComplianceSeverity. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationComplianceSeverity) Values() []AssociationComplianceSeverity {
	return []AssociationComplianceSeverity{
		"CRITICAL",
		"HIGH",
		"MEDIUM",
		"LOW",
		"UNSPECIFIED",
	}
}

type AssociationExecutionFilterKey string

// Enum values for AssociationExecutionFilterKey
const (
	AssociationExecutionFilterKeyExecutionId AssociationExecutionFilterKey = "ExecutionId"
	AssociationExecutionFilterKeyStatus      AssociationExecutionFilterKey = "Status"
	AssociationExecutionFilterKeyCreatedTime AssociationExecutionFilterKey = "CreatedTime"
)

// Values returns all known values for AssociationExecutionFilterKey. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationExecutionFilterKey) Values() []AssociationExecutionFilterKey {
	return []AssociationExecutionFilterKey{
		"ExecutionId",
		"Status",
		"CreatedTime",
	}
}

type AssociationExecutionTargetsFilterKey string

// Enum values for AssociationExecutionTargetsFilterKey
const (
	AssociationExecutionTargetsFilterKeyStatus       AssociationExecutionTargetsFilterKey = "Status"
	AssociationExecutionTargetsFilterKeyResourceId   AssociationExecutionTargetsFilterKey = "ResourceId"
	AssociationExecutionTargetsFilterKeyResourceType AssociationExecutionTargetsFilterKey = "ResourceType"
)

// Values returns all known values for AssociationExecutionTargetsFilterKey. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationExecutionTargetsFilterKey) Values() []AssociationExecutionTargetsFilterKey {
	return []AssociationExecutionTargetsFilterKey{
		"Status",
		"ResourceId",
		"ResourceType",
	}
}

type AssociationFilterKey string

// Enum values for AssociationFilterKey
const (
	AssociationFilterKeyInstanceId         AssociationFilterKey = "InstanceId"
	AssociationFilterKeyName               AssociationFilterKey = "Name"
	AssociationFilterKeyAssociationId      AssociationFilterKey = "AssociationId"
	AssociationFilterKeyStatus             AssociationFilterKey = "AssociationStatusName"
	AssociationFilterKeyLastExecutedBefore AssociationFilterKey = "LastExecutedBefore"
	AssociationFilterKeyLastExecutedAfter  AssociationFilterKey = "LastExecutedAfter"
	AssociationFilterKeyAssociationName    AssociationFilterKey = "AssociationName"
	AssociationFilterKeyResourceGroupName  AssociationFilterKey = "ResourceGroupName"
)

// Values returns all known values for AssociationFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationFilterKey) Values() []AssociationFilterKey {
	return []AssociationFilterKey{
		"InstanceId",
		"Name",
		"AssociationId",
		"AssociationStatusName",
		"LastExecutedBefore",
		"LastExecutedAfter",
		"AssociationName",
		"ResourceGroupName",
	}
}

type AssociationFilterOperatorType string

// Enum values for AssociationFilterOperatorType
const (
	AssociationFilterOperatorTypeEqual       AssociationFilterOperatorType = "EQUAL"
	AssociationFilterOperatorTypeLessThan    AssociationFilterOperatorType = "LESS_THAN"
	AssociationFilterOperatorTypeGreaterThan AssociationFilterOperatorType = "GREATER_THAN"
)

// Values returns all known values for AssociationFilterOperatorType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationFilterOperatorType) Values() []AssociationFilterOperatorType {
	return []AssociationFilterOperatorType{
		"EQUAL",
		"LESS_THAN",
		"GREATER_THAN",
	}
}

type AssociationStatusName string

// Enum values for AssociationStatusName
const (
	AssociationStatusNamePending AssociationStatusName = "Pending"
	AssociationStatusNameSuccess AssociationStatusName = "Success"
	AssociationStatusNameFailed  AssociationStatusName = "Failed"
)

// Values returns all known values for AssociationStatusName. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationStatusName) Values() []AssociationStatusName {
	return []AssociationStatusName{
		"Pending",
		"Success",
		"Failed",
	}
}

type AssociationSyncCompliance string

// Enum values for AssociationSyncCompliance
const (
	AssociationSyncComplianceAuto   AssociationSyncCompliance = "AUTO"
	AssociationSyncComplianceManual AssociationSyncCompliance = "MANUAL"
)

// Values returns all known values for AssociationSyncCompliance. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationSyncCompliance) Values() []AssociationSyncCompliance {
	return []AssociationSyncCompliance{
		"AUTO",
		"MANUAL",
	}
}

type AttachmentHashType string

// Enum values for AttachmentHashType
const (
	AttachmentHashTypeSha256 AttachmentHashType = "Sha256"
)

// Values returns all known values for AttachmentHashType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AttachmentHashType) Values() []AttachmentHashType {
	return []AttachmentHashType{
		"Sha256",
	}
}

type AttachmentsSourceKey string

// Enum values for AttachmentsSourceKey
const (
	AttachmentsSourceKeySourceUrl           AttachmentsSourceKey = "SourceUrl"
	AttachmentsSourceKeyS3FileUrl           AttachmentsSourceKey = "S3FileUrl"
	AttachmentsSourceKeyAttachmentReference AttachmentsSourceKey = "AttachmentReference"
)

// Values returns all known values for AttachmentsSourceKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AttachmentsSourceKey) Values() []AttachmentsSourceKey {
	return []AttachmentsSourceKey{
		"SourceUrl",
		"S3FileUrl",
		"AttachmentReference",
	}
}

type AutomationExecutionFilterKey string

// Enum values for AutomationExecutionFilterKey
const (
	AutomationExecutionFilterKeyDocumentNamePrefix  AutomationExecutionFilterKey = "DocumentNamePrefix"
	AutomationExecutionFilterKeyExecutionStatus     AutomationExecutionFilterKey = "ExecutionStatus"
	AutomationExecutionFilterKeyExecutionId         AutomationExecutionFilterKey = "ExecutionId"
	AutomationExecutionFilterKeyParentExecutionId   AutomationExecutionFilterKey = "ParentExecutionId"
	AutomationExecutionFilterKeyCurrentAction       AutomationExecutionFilterKey = "CurrentAction"
	AutomationExecutionFilterKeyStartTimeBefore     AutomationExecutionFilterKey = "StartTimeBefore"
	AutomationExecutionFilterKeyStartTimeAfter      AutomationExecutionFilterKey = "StartTimeAfter"
	AutomationExecutionFilterKeyAutomationType      AutomationExecutionFilterKey = "AutomationType"
	AutomationExecutionFilterKeyTagKey              AutomationExecutionFilterKey = "TagKey"
	AutomationExecutionFilterKeyTargetResourceGroup AutomationExecutionFilterKey = "TargetResourceGroup"
	AutomationExecutionFilterKeyAutomationSubtype   AutomationExecutionFilterKey = "AutomationSubtype"
	AutomationExecutionFilterKeyOpsItemId           AutomationExecutionFilterKey = "OpsItemId"
)

// Values returns all known values for AutomationExecutionFilterKey. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutomationExecutionFilterKey) Values() []AutomationExecutionFilterKey {
	return []AutomationExecutionFilterKey{
		"DocumentNamePrefix",
		"ExecutionStatus",
		"ExecutionId",
		"ParentExecutionId",
		"CurrentAction",
		"StartTimeBefore",
		"StartTimeAfter",
		"AutomationType",
		"TagKey",
		"TargetResourceGroup",
		"AutomationSubtype",
		"OpsItemId",
	}
}

type AutomationExecutionStatus string

// Enum values for AutomationExecutionStatus
const (
	AutomationExecutionStatusPending                        AutomationExecutionStatus = "Pending"
	AutomationExecutionStatusInprogress                     AutomationExecutionStatus = "InProgress"
	AutomationExecutionStatusWaiting                        AutomationExecutionStatus = "Waiting"
	AutomationExecutionStatusSuccess                        AutomationExecutionStatus = "Success"
	AutomationExecutionStatusTimedout                       AutomationExecutionStatus = "TimedOut"
	AutomationExecutionStatusCancelling                     AutomationExecutionStatus = "Cancelling"
	AutomationExecutionStatusCancelled                      AutomationExecutionStatus = "Cancelled"
	AutomationExecutionStatusFailed                         AutomationExecutionStatus = "Failed"
	AutomationExecutionStatusPendingApproval                AutomationExecutionStatus = "PendingApproval"
	AutomationExecutionStatusApproved                       AutomationExecutionStatus = "Approved"
	AutomationExecutionStatusRejected                       AutomationExecutionStatus = "Rejected"
	AutomationExecutionStatusScheduled                      AutomationExecutionStatus = "Scheduled"
	AutomationExecutionStatusRunbookInprogress              AutomationExecutionStatus = "RunbookInProgress"
	AutomationExecutionStatusPendingChangeCalendarOverride  AutomationExecutionStatus = "PendingChangeCalendarOverride"
	AutomationExecutionStatusChangeCalendarOverrideApproved AutomationExecutionStatus = "ChangeCalendarOverrideApproved"
	AutomationExecutionStatusChangeCalendarOverrideRejected AutomationExecutionStatus = "ChangeCalendarOverrideRejected"
	AutomationExecutionStatusCompletedWithSuccess           AutomationExecutionStatus = "CompletedWithSuccess"
	AutomationExecutionStatusCompletedWithFailure           AutomationExecutionStatus = "CompletedWithFailure"
	AutomationExecutionStatusExited                         AutomationExecutionStatus = "Exited"
)

// Values returns all known values for AutomationExecutionStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutomationExecutionStatus) Values() []AutomationExecutionStatus {
	return []AutomationExecutionStatus{
		"Pending",
		"InProgress",
		"Waiting",
		"Success",
		"TimedOut",
		"Cancelling",
		"Cancelled",
		"Failed",
		"PendingApproval",
		"Approved",
		"Rejected",
		"Scheduled",
		"RunbookInProgress",
		"PendingChangeCalendarOverride",
		"ChangeCalendarOverrideApproved",
		"ChangeCalendarOverrideRejected",
		"CompletedWithSuccess",
		"CompletedWithFailure",
		"Exited",
	}
}

type AutomationSubtype string

// Enum values for AutomationSubtype
const (
	AutomationSubtypeChangeRequest AutomationSubtype = "ChangeRequest"
)

// Values returns all known values for AutomationSubtype. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutomationSubtype) Values() []AutomationSubtype {
	return []AutomationSubtype{
		"ChangeRequest",
	}
}

type AutomationType string

// Enum values for AutomationType
const (
	AutomationTypeCrossAccount AutomationType = "CrossAccount"
	AutomationTypeLocal        AutomationType = "Local"
)

// Values returns all known values for AutomationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutomationType) Values() []AutomationType {
	return []AutomationType{
		"CrossAccount",
		"Local",
	}
}

type CalendarState string

// Enum values for CalendarState
const (
	CalendarStateOpen   CalendarState = "OPEN"
	CalendarStateClosed CalendarState = "CLOSED"
)

// Values returns all known values for CalendarState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CalendarState) Values() []CalendarState {
	return []CalendarState{
		"OPEN",
		"CLOSED",
	}
}

type CommandFilterKey string

// Enum values for CommandFilterKey
const (
	CommandFilterKeyInvokedAfter   CommandFilterKey = "InvokedAfter"
	CommandFilterKeyInvokedBefore  CommandFilterKey = "InvokedBefore"
	CommandFilterKeyStatus         CommandFilterKey = "Status"
	CommandFilterKeyExecutionStage CommandFilterKey = "ExecutionStage"
	CommandFilterKeyDocumentName   CommandFilterKey = "DocumentName"
)

// Values returns all known values for CommandFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CommandFilterKey) Values() []CommandFilterKey {
	return []CommandFilterKey{
		"InvokedAfter",
		"InvokedBefore",
		"Status",
		"ExecutionStage",
		"DocumentName",
	}
}

type CommandInvocationStatus string

// Enum values for CommandInvocationStatus
const (
	CommandInvocationStatusPending    CommandInvocationStatus = "Pending"
	CommandInvocationStatusInProgress CommandInvocationStatus = "InProgress"
	CommandInvocationStatusDelayed    CommandInvocationStatus = "Delayed"
	CommandInvocationStatusSuccess    CommandInvocationStatus = "Success"
	CommandInvocationStatusCancelled  CommandInvocationStatus = "Cancelled"
	CommandInvocationStatusTimedOut   CommandInvocationStatus = "TimedOut"
	CommandInvocationStatusFailed     CommandInvocationStatus = "Failed"
	CommandInvocationStatusCancelling CommandInvocationStatus = "Cancelling"
)

// Values returns all known values for CommandInvocationStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CommandInvocationStatus) Values() []CommandInvocationStatus {
	return []CommandInvocationStatus{
		"Pending",
		"InProgress",
		"Delayed",
		"Success",
		"Cancelled",
		"TimedOut",
		"Failed",
		"Cancelling",
	}
}

type CommandPluginStatus string

// Enum values for CommandPluginStatus
const (
	CommandPluginStatusPending    CommandPluginStatus = "Pending"
	CommandPluginStatusInProgress CommandPluginStatus = "InProgress"
	CommandPluginStatusSuccess    CommandPluginStatus = "Success"
	CommandPluginStatusTimedOut   CommandPluginStatus = "TimedOut"
	CommandPluginStatusCancelled  CommandPluginStatus = "Cancelled"
	CommandPluginStatusFailed     CommandPluginStatus = "Failed"
)

// Values returns all known values for CommandPluginStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CommandPluginStatus) Values() []CommandPluginStatus {
	return []CommandPluginStatus{
		"Pending",
		"InProgress",
		"Success",
		"TimedOut",
		"Cancelled",
		"Failed",
	}
}

type CommandStatus string

// Enum values for CommandStatus
const (
	CommandStatusPending    CommandStatus = "Pending"
	CommandStatusInProgress CommandStatus = "InProgress"
	CommandStatusSuccess    CommandStatus = "Success"
	CommandStatusCancelled  CommandStatus = "Cancelled"
	CommandStatusFailed     CommandStatus = "Failed"
	CommandStatusTimedOut   CommandStatus = "TimedOut"
	CommandStatusCancelling CommandStatus = "Cancelling"
)

// Values returns all known values for CommandStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CommandStatus) Values() []CommandStatus {
	return []CommandStatus{
		"Pending",
		"InProgress",
		"Success",
		"Cancelled",
		"Failed",
		"TimedOut",
		"Cancelling",
	}
}

type ComplianceQueryOperatorType string

// Enum values for ComplianceQueryOperatorType
const (
	ComplianceQueryOperatorTypeEqual       ComplianceQueryOperatorType = "EQUAL"
	ComplianceQueryOperatorTypeNotEqual    ComplianceQueryOperatorType = "NOT_EQUAL"
	ComplianceQueryOperatorTypeBeginWith   ComplianceQueryOperatorType = "BEGIN_WITH"
	ComplianceQueryOperatorTypeLessThan    ComplianceQueryOperatorType = "LESS_THAN"
	ComplianceQueryOperatorTypeGreaterThan ComplianceQueryOperatorType = "GREATER_THAN"
)

// Values returns all known values for ComplianceQueryOperatorType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceQueryOperatorType) Values() []ComplianceQueryOperatorType {
	return []ComplianceQueryOperatorType{
		"EQUAL",
		"NOT_EQUAL",
		"BEGIN_WITH",
		"LESS_THAN",
		"GREATER_THAN",
	}
}

type ComplianceSeverity string

// Enum values for ComplianceSeverity
const (
	ComplianceSeverityCritical      ComplianceSeverity = "CRITICAL"
	ComplianceSeverityHigh          ComplianceSeverity = "HIGH"
	ComplianceSeverityMedium        ComplianceSeverity = "MEDIUM"
	ComplianceSeverityLow           ComplianceSeverity = "LOW"
	ComplianceSeverityInformational ComplianceSeverity = "INFORMATIONAL"
	ComplianceSeverityUnspecified   ComplianceSeverity = "UNSPECIFIED"
)

// Values returns all known values for ComplianceSeverity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceSeverity) Values() []ComplianceSeverity {
	return []ComplianceSeverity{
		"CRITICAL",
		"HIGH",
		"MEDIUM",
		"LOW",
		"INFORMATIONAL",
		"UNSPECIFIED",
	}
}

type ComplianceStatus string

// Enum values for ComplianceStatus
const (
	ComplianceStatusCompliant    ComplianceStatus = "COMPLIANT"
	ComplianceStatusNonCompliant ComplianceStatus = "NON_COMPLIANT"
)

// Values returns all known values for ComplianceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceStatus) Values() []ComplianceStatus {
	return []ComplianceStatus{
		"COMPLIANT",
		"NON_COMPLIANT",
	}
}

type ComplianceUploadType string

// Enum values for ComplianceUploadType
const (
	ComplianceUploadTypeComplete ComplianceUploadType = "COMPLETE"
	ComplianceUploadTypePartial  ComplianceUploadType = "PARTIAL"
)

// Values returns all known values for ComplianceUploadType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceUploadType) Values() []ComplianceUploadType {
	return []ComplianceUploadType{
		"COMPLETE",
		"PARTIAL",
	}
}

type ConnectionStatus string

// Enum values for ConnectionStatus
const (
	ConnectionStatusConnected    ConnectionStatus = "connected"
	ConnectionStatusNotConnected ConnectionStatus = "notconnected"
)

// Values returns all known values for ConnectionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConnectionStatus) Values() []ConnectionStatus {
	return []ConnectionStatus{
		"connected",
		"notconnected",
	}
}

type DescribeActivationsFilterKeys string

// Enum values for DescribeActivationsFilterKeys
const (
	DescribeActivationsFilterKeysActivationIds       DescribeActivationsFilterKeys = "ActivationIds"
	DescribeActivationsFilterKeysDefaultInstanceName DescribeActivationsFilterKeys = "DefaultInstanceName"
	DescribeActivationsFilterKeysIamRole             DescribeActivationsFilterKeys = "IamRole"
)

// Values returns all known values for DescribeActivationsFilterKeys. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DescribeActivationsFilterKeys) Values() []DescribeActivationsFilterKeys {
	return []DescribeActivationsFilterKeys{
		"ActivationIds",
		"DefaultInstanceName",
		"IamRole",
	}
}

type DocumentFilterKey string

// Enum values for DocumentFilterKey
const (
	DocumentFilterKeyName          DocumentFilterKey = "Name"
	DocumentFilterKeyOwner         DocumentFilterKey = "Owner"
	DocumentFilterKeyPlatformTypes DocumentFilterKey = "PlatformTypes"
	DocumentFilterKeyDocumentType  DocumentFilterKey = "DocumentType"
)

// Values returns all known values for DocumentFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentFilterKey) Values() []DocumentFilterKey {
	return []DocumentFilterKey{
		"Name",
		"Owner",
		"PlatformTypes",
		"DocumentType",
	}
}

type DocumentFormat string

// Enum values for DocumentFormat
const (
	DocumentFormatYaml DocumentFormat = "YAML"
	DocumentFormatJson DocumentFormat = "JSON"
	DocumentFormatText DocumentFormat = "TEXT"
)

// Values returns all known values for DocumentFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentFormat) Values() []DocumentFormat {
	return []DocumentFormat{
		"YAML",
		"JSON",
		"TEXT",
	}
}

type DocumentHashType string

// Enum values for DocumentHashType
const (
	DocumentHashTypeSha256 DocumentHashType = "Sha256"
	DocumentHashTypeSha1   DocumentHashType = "Sha1"
)

// Values returns all known values for DocumentHashType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentHashType) Values() []DocumentHashType {
	return []DocumentHashType{
		"Sha256",
		"Sha1",
	}
}

type DocumentMetadataEnum string

// Enum values for DocumentMetadataEnum
const (
	DocumentMetadataEnumDocumentReviews DocumentMetadataEnum = "DocumentReviews"
)

// Values returns all known values for DocumentMetadataEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentMetadataEnum) Values() []DocumentMetadataEnum {
	return []DocumentMetadataEnum{
		"DocumentReviews",
	}
}

type DocumentParameterType string

// Enum values for DocumentParameterType
const (
	DocumentParameterTypeString     DocumentParameterType = "String"
	DocumentParameterTypeStringList DocumentParameterType = "StringList"
)

// Values returns all known values for DocumentParameterType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentParameterType) Values() []DocumentParameterType {
	return []DocumentParameterType{
		"String",
		"StringList",
	}
}

type DocumentPermissionType string

// Enum values for DocumentPermissionType
const (
	DocumentPermissionTypeShare DocumentPermissionType = "Share"
)

// Values returns all known values for DocumentPermissionType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentPermissionType) Values() []DocumentPermissionType {
	return []DocumentPermissionType{
		"Share",
	}
}

type DocumentReviewAction string

// Enum values for DocumentReviewAction
const (
	DocumentReviewActionSendForReview DocumentReviewAction = "SendForReview"
	DocumentReviewActionUpdateReview  DocumentReviewAction = "UpdateReview"
	DocumentReviewActionApprove       DocumentReviewAction = "Approve"
	DocumentReviewActionReject        DocumentReviewAction = "Reject"
)

// Values returns all known values for DocumentReviewAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentReviewAction) Values() []DocumentReviewAction {
	return []DocumentReviewAction{
		"SendForReview",
		"UpdateReview",
		"Approve",
		"Reject",
	}
}

type DocumentReviewCommentType string

// Enum values for DocumentReviewCommentType
const (
	DocumentReviewCommentTypeComment DocumentReviewCommentType = "Comment"
)

// Values returns all known values for DocumentReviewCommentType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentReviewCommentType) Values() []DocumentReviewCommentType {
	return []DocumentReviewCommentType{
		"Comment",
	}
}

type DocumentStatus string

// Enum values for DocumentStatus
const (
	DocumentStatusCreating DocumentStatus = "Creating"
	DocumentStatusActive   DocumentStatus = "Active"
	DocumentStatusUpdating DocumentStatus = "Updating"
	DocumentStatusDeleting DocumentStatus = "Deleting"
	DocumentStatusFailed   DocumentStatus = "Failed"
)

// Values returns all known values for DocumentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentStatus) Values() []DocumentStatus {
	return []DocumentStatus{
		"Creating",
		"Active",
		"Updating",
		"Deleting",
		"Failed",
	}
}

type DocumentType string

// Enum values for DocumentType
const (
	DocumentTypeCommand                        DocumentType = "Command"
	DocumentTypePolicy                         DocumentType = "Policy"
	DocumentTypeAutomation                     DocumentType = "Automation"
	DocumentTypeSession                        DocumentType = "Session"
	DocumentTypePackage                        DocumentType = "Package"
	DocumentTypeApplicationConfiguration       DocumentType = "ApplicationConfiguration"
	DocumentTypeApplicationConfigurationSchema DocumentType = "ApplicationConfigurationSchema"
	DocumentTypeDeploymentStrategy             DocumentType = "DeploymentStrategy"
	DocumentTypeChangeCalendar                 DocumentType = "ChangeCalendar"
	DocumentTypeChangeTemplate                 DocumentType = "Automation.ChangeTemplate"
	DocumentTypeProblemAnalysis                DocumentType = "ProblemAnalysis"
	DocumentTypeProblemAnalysisTemplate        DocumentType = "ProblemAnalysisTemplate"
	DocumentTypeCloudFormation                 DocumentType = "CloudFormation"
	DocumentTypeConformancePackTemplate        DocumentType = "ConformancePackTemplate"
	DocumentTypeQuickSetup                     DocumentType = "QuickSetup"
)

// Values returns all known values for DocumentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentType) Values() []DocumentType {
	return []DocumentType{
		"Command",
		"Policy",
		"Automation",
		"Session",
		"Package",
		"ApplicationConfiguration",
		"ApplicationConfigurationSchema",
		"DeploymentStrategy",
		"ChangeCalendar",
		"Automation.ChangeTemplate",
		"ProblemAnalysis",
		"ProblemAnalysisTemplate",
		"CloudFormation",
		"ConformancePackTemplate",
		"QuickSetup",
	}
}

type ExecutionMode string

// Enum values for ExecutionMode
const (
	ExecutionModeAuto        ExecutionMode = "Auto"
	ExecutionModeInteractive ExecutionMode = "Interactive"
)

// Values returns all known values for ExecutionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionMode) Values() []ExecutionMode {
	return []ExecutionMode{
		"Auto",
		"Interactive",
	}
}

type ExecutionPreviewStatus string

// Enum values for ExecutionPreviewStatus
const (
	ExecutionPreviewStatusPending    ExecutionPreviewStatus = "Pending"
	ExecutionPreviewStatusInProgress ExecutionPreviewStatus = "InProgress"
	ExecutionPreviewStatusSuccess    ExecutionPreviewStatus = "Success"
	ExecutionPreviewStatusFailed     ExecutionPreviewStatus = "Failed"
)

// Values returns all known values for ExecutionPreviewStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionPreviewStatus) Values() []ExecutionPreviewStatus {
	return []ExecutionPreviewStatus{
		"Pending",
		"InProgress",
		"Success",
		"Failed",
	}
}

type ExternalAlarmState string

// Enum values for ExternalAlarmState
const (
	ExternalAlarmStateUnknown ExternalAlarmState = "UNKNOWN"
	ExternalAlarmStateAlarm   ExternalAlarmState = "ALARM"
)

// Values returns all known values for ExternalAlarmState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExternalAlarmState) Values() []ExternalAlarmState {
	return []ExternalAlarmState{
		"UNKNOWN",
		"ALARM",
	}
}

type Fault string

// Enum values for Fault
const (
	FaultClient  Fault = "Client"
	FaultServer  Fault = "Server"
	FaultUnknown Fault = "Unknown"
)

// Values returns all known values for Fault. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Fault) Values() []Fault {
	return []Fault{
		"Client",
		"Server",
		"Unknown",
	}
}

type ImpactType string

// Enum values for ImpactType
const (
	ImpactTypeMutating     ImpactType = "Mutating"
	ImpactTypeNonMutating  ImpactType = "NonMutating"
	ImpactTypeUndetermined ImpactType = "Undetermined"
)

// Values returns all known values for ImpactType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImpactType) Values() []ImpactType {
	return []ImpactType{
		"Mutating",
		"NonMutating",
		"Undetermined",
	}
}

type InstanceInformationFilterKey string

// Enum values for InstanceInformationFilterKey
const (
	InstanceInformationFilterKeyInstanceIds       InstanceInformationFilterKey = "InstanceIds"
	InstanceInformationFilterKeyAgentVersion      InstanceInformationFilterKey = "AgentVersion"
	InstanceInformationFilterKeyPingStatus        InstanceInformationFilterKey = "PingStatus"
	InstanceInformationFilterKeyPlatformTypes     InstanceInformationFilterKey = "PlatformTypes"
	InstanceInformationFilterKeyActivationIds     InstanceInformationFilterKey = "ActivationIds"
	InstanceInformationFilterKeyIamRole           InstanceInformationFilterKey = "IamRole"
	InstanceInformationFilterKeyResourceType      InstanceInformationFilterKey = "ResourceType"
	InstanceInformationFilterKeyAssociationStatus InstanceInformationFilterKey = "AssociationStatus"
)

// Values returns all known values for InstanceInformationFilterKey. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InstanceInformationFilterKey) Values() []InstanceInformationFilterKey {
	return []InstanceInformationFilterKey{
		"InstanceIds",
		"AgentVersion",
		"PingStatus",
		"PlatformTypes",
		"ActivationIds",
		"IamRole",
		"ResourceType",
		"AssociationStatus",
	}
}

type InstancePatchStateOperatorType string

// Enum values for InstancePatchStateOperatorType
const (
	InstancePatchStateOperatorTypeEqual       InstancePatchStateOperatorType = "Equal"
	InstancePatchStateOperatorTypeNotEqual    InstancePatchStateOperatorType = "NotEqual"
	InstancePatchStateOperatorTypeLessThan    InstancePatchStateOperatorType = "LessThan"
	InstancePatchStateOperatorTypeGreaterThan InstancePatchStateOperatorType = "GreaterThan"
)

// Values returns all known values for InstancePatchStateOperatorType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InstancePatchStateOperatorType) Values() []InstancePatchStateOperatorType {
	return []InstancePatchStateOperatorType{
		"Equal",
		"NotEqual",
		"LessThan",
		"GreaterThan",
	}
}

type InstancePropertyFilterKey string

// Enum values for InstancePropertyFilterKey
const (
	InstancePropertyFilterKeyInstanceIds       InstancePropertyFilterKey = "InstanceIds"
	InstancePropertyFilterKeyAgentVersion      InstancePropertyFilterKey = "AgentVersion"
	InstancePropertyFilterKeyPingStatus        InstancePropertyFilterKey = "PingStatus"
	InstancePropertyFilterKeyPlatformTypes     InstancePropertyFilterKey = "PlatformTypes"
	InstancePropertyFilterKeyDocumentName      InstancePropertyFilterKey = "DocumentName"
	InstancePropertyFilterKeyActivationIds     InstancePropertyFilterKey = "ActivationIds"
	InstancePropertyFilterKeyIamRole           InstancePropertyFilterKey = "IamRole"
	InstancePropertyFilterKeyResourceType      InstancePropertyFilterKey = "ResourceType"
	InstancePropertyFilterKeyAssociationStatus InstancePropertyFilterKey = "AssociationStatus"
)

// Values returns all known values for InstancePropertyFilterKey. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InstancePropertyFilterKey) Values() []InstancePropertyFilterKey {
	return []InstancePropertyFilterKey{
		"InstanceIds",
		"AgentVersion",
		"PingStatus",
		"PlatformTypes",
		"DocumentName",
		"ActivationIds",
		"IamRole",
		"ResourceType",
		"AssociationStatus",
	}
}

type InstancePropertyFilterOperator string

// Enum values for InstancePropertyFilterOperator
const (
	InstancePropertyFilterOperatorEqual       InstancePropertyFilterOperator = "Equal"
	InstancePropertyFilterOperatorNotEqual    InstancePropertyFilterOperator = "NotEqual"
	InstancePropertyFilterOperatorBeginWith   InstancePropertyFilterOperator = "BeginWith"
	InstancePropertyFilterOperatorLessThan    InstancePropertyFilterOperator = "LessThan"
	InstancePropertyFilterOperatorGreaterThan InstancePropertyFilterOperator = "GreaterThan"
)

// Values returns all known values for InstancePropertyFilterOperator. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InstancePropertyFilterOperator) Values() []InstancePropertyFilterOperator {
	return []InstancePropertyFilterOperator{
		"Equal",
		"NotEqual",
		"BeginWith",
		"LessThan",
		"GreaterThan",
	}
}

type InventoryAttributeDataType string

// Enum values for InventoryAttributeDataType
const (
	InventoryAttributeDataTypeString InventoryAttributeDataType = "string"
	InventoryAttributeDataTypeNumber InventoryAttributeDataType = "number"
)

// Values returns all known values for InventoryAttributeDataType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventoryAttributeDataType) Values() []InventoryAttributeDataType {
	return []InventoryAttributeDataType{
		"string",
		"number",
	}
}

type InventoryDeletionStatus string

// Enum values for InventoryDeletionStatus
const (
	InventoryDeletionStatusInProgress InventoryDeletionStatus = "InProgress"
	InventoryDeletionStatusComplete   InventoryDeletionStatus = "Complete"
)

// Values returns all known values for InventoryDeletionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventoryDeletionStatus) Values() []InventoryDeletionStatus {
	return []InventoryDeletionStatus{
		"InProgress",
		"Complete",
	}
}

type InventoryQueryOperatorType string

// Enum values for InventoryQueryOperatorType
const (
	InventoryQueryOperatorTypeEqual       InventoryQueryOperatorType = "Equal"
	InventoryQueryOperatorTypeNotEqual    InventoryQueryOperatorType = "NotEqual"
	InventoryQueryOperatorTypeBeginWith   InventoryQueryOperatorType = "BeginWith"
	InventoryQueryOperatorTypeLessThan    InventoryQueryOperatorType = "LessThan"
	InventoryQueryOperatorTypeGreaterThan InventoryQueryOperatorType = "GreaterThan"
	InventoryQueryOperatorTypeExists      InventoryQueryOperatorType = "Exists"
)

// Values returns all known values for InventoryQueryOperatorType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventoryQueryOperatorType) Values() []InventoryQueryOperatorType {
	return []InventoryQueryOperatorType{
		"Equal",
		"NotEqual",
		"BeginWith",
		"LessThan",
		"GreaterThan",
		"Exists",
	}
}

type InventorySchemaDeleteOption string

// Enum values for InventorySchemaDeleteOption
const (
	InventorySchemaDeleteOptionDisableSchema InventorySchemaDeleteOption = "DisableSchema"
	InventorySchemaDeleteOptionDeleteSchema  InventorySchemaDeleteOption = "DeleteSchema"
)

// Values returns all known values for InventorySchemaDeleteOption. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventorySchemaDeleteOption) Values() []InventorySchemaDeleteOption {
	return []InventorySchemaDeleteOption{
		"DisableSchema",
		"DeleteSchema",
	}
}

type LastResourceDataSyncStatus string

// Enum values for LastResourceDataSyncStatus
const (
	LastResourceDataSyncStatusSuccessful LastResourceDataSyncStatus = "Successful"
	LastResourceDataSyncStatusFailed     LastResourceDataSyncStatus = "Failed"
	LastResourceDataSyncStatusInprogress LastResourceDataSyncStatus = "InProgress"
)

// Values returns all known values for LastResourceDataSyncStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LastResourceDataSyncStatus) Values() []LastResourceDataSyncStatus {
	return []LastResourceDataSyncStatus{
		"Successful",
		"Failed",
		"InProgress",
	}
}

type MaintenanceWindowExecutionStatus string

// Enum values for MaintenanceWindowExecutionStatus
const (
	MaintenanceWindowExecutionStatusPending            MaintenanceWindowExecutionStatus = "PENDING"
	MaintenanceWindowExecutionStatusInProgress         MaintenanceWindowExecutionStatus = "IN_PROGRESS"
	MaintenanceWindowExecutionStatusSuccess            MaintenanceWindowExecutionStatus = "SUCCESS"
	MaintenanceWindowExecutionStatusFailed             MaintenanceWindowExecutionStatus = "FAILED"
	MaintenanceWindowExecutionStatusTimedOut           MaintenanceWindowExecutionStatus = "TIMED_OUT"
	MaintenanceWindowExecutionStatusCancelling         MaintenanceWindowExecutionStatus = "CANCELLING"
	MaintenanceWindowExecutionStatusCancelled          MaintenanceWindowExecutionStatus = "CANCELLED"
	MaintenanceWindowExecutionStatusSkippedOverlapping MaintenanceWindowExecutionStatus = "SKIPPED_OVERLAPPING"
)

// Values returns all known values for MaintenanceWindowExecutionStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaintenanceWindowExecutionStatus) Values() []MaintenanceWindowExecutionStatus {
	return []MaintenanceWindowExecutionStatus{
		"PENDING",
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
		"TIMED_OUT",
		"CANCELLING",
		"CANCELLED",
		"SKIPPED_OVERLAPPING",
	}
}

type MaintenanceWindowResourceType string

// Enum values for MaintenanceWindowResourceType
const (
	MaintenanceWindowResourceTypeInstance      MaintenanceWindowResourceType = "INSTANCE"
	MaintenanceWindowResourceTypeResourceGroup MaintenanceWindowResourceType = "RESOURCE_GROUP"
)

// Values returns all known values for MaintenanceWindowResourceType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaintenanceWindowResourceType) Values() []MaintenanceWindowResourceType {
	return []MaintenanceWindowResourceType{
		"INSTANCE",
		"RESOURCE_GROUP",
	}
}

type MaintenanceWindowTaskCutoffBehavior string

// Enum values for MaintenanceWindowTaskCutoffBehavior
const (
	MaintenanceWindowTaskCutoffBehaviorContinueTask MaintenanceWindowTaskCutoffBehavior = "CONTINUE_TASK"
	MaintenanceWindowTaskCutoffBehaviorCancelTask   MaintenanceWindowTaskCutoffBehavior = "CANCEL_TASK"
)

// Values returns all known values for MaintenanceWindowTaskCutoffBehavior. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaintenanceWindowTaskCutoffBehavior) Values() []MaintenanceWindowTaskCutoffBehavior {
	return []MaintenanceWindowTaskCutoffBehavior{
		"CONTINUE_TASK",
		"CANCEL_TASK",
	}
}

type MaintenanceWindowTaskType string

// Enum values for MaintenanceWindowTaskType
const (
	MaintenanceWindowTaskTypeRunCommand    MaintenanceWindowTaskType = "RUN_COMMAND"
	MaintenanceWindowTaskTypeAutomation    MaintenanceWindowTaskType = "AUTOMATION"
	MaintenanceWindowTaskTypeStepFunctions MaintenanceWindowTaskType = "STEP_FUNCTIONS"
	MaintenanceWindowTaskTypeLambda        MaintenanceWindowTaskType = "LAMBDA"
)

// Values returns all known values for MaintenanceWindowTaskType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaintenanceWindowTaskType) Values() []MaintenanceWindowTaskType {
	return []MaintenanceWindowTaskType{
		"RUN_COMMAND",
		"AUTOMATION",
		"STEP_FUNCTIONS",
		"LAMBDA",
	}
}

type ManagedStatus string

// Enum values for ManagedStatus
const (
	ManagedStatusAll       ManagedStatus = "All"
	ManagedStatusManaged   ManagedStatus = "Managed"
	ManagedStatusUnmanaged ManagedStatus = "Unmanaged"
)

// Values returns all known values for ManagedStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ManagedStatus) Values() []ManagedStatus {
	return []ManagedStatus{
		"All",
		"Managed",
		"Unmanaged",
	}
}

type NodeAggregatorType string

// Enum values for NodeAggregatorType
const (
	NodeAggregatorTypeCount NodeAggregatorType = "Count"
)

// Values returns all known values for NodeAggregatorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NodeAggregatorType) Values() []NodeAggregatorType {
	return []NodeAggregatorType{
		"Count",
	}
}

type NodeAttributeName string

// Enum values for NodeAttributeName
const (
	NodeAttributeNameAgentVersion    NodeAttributeName = "AgentVersion"
	NodeAttributeNamePlatformName    NodeAttributeName = "PlatformName"
	NodeAttributeNamePlatformType    NodeAttributeName = "PlatformType"
	NodeAttributeNamePlatformVersion NodeAttributeName = "PlatformVersion"
	NodeAttributeNameRegion          NodeAttributeName = "Region"
	NodeAttributeNameResourceType    NodeAttributeName = "ResourceType"
)

// Values returns all known values for NodeAttributeName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NodeAttributeName) Values() []NodeAttributeName {
	return []NodeAttributeName{
		"AgentVersion",
		"PlatformName",
		"PlatformType",
		"PlatformVersion",
		"Region",
		"ResourceType",
	}
}

type NodeFilterKey string

// Enum values for NodeFilterKey
const (
	NodeFilterKeyAgentType              NodeFilterKey = "AgentType"
	NodeFilterKeyAgentVersion           NodeFilterKey = "AgentVersion"
	NodeFilterKeyComputerName           NodeFilterKey = "ComputerName"
	NodeFilterKeyInstanceId             NodeFilterKey = "InstanceId"
	NodeFilterKeyInstanceStatus         NodeFilterKey = "InstanceStatus"
	NodeFilterKeyIpAddress              NodeFilterKey = "IpAddress"
	NodeFilterKeyManagedStatus          NodeFilterKey = "ManagedStatus"
	NodeFilterKeyPlatformName           NodeFilterKey = "PlatformName"
	NodeFilterKeyPlatformType           NodeFilterKey = "PlatformType"
	NodeFilterKeyPlatformVersion        NodeFilterKey = "PlatformVersion"
	NodeFilterKeyResourceType           NodeFilterKey = "ResourceType"
	NodeFilterKeyOrganizationalUnitId   NodeFilterKey = "OrganizationalUnitId"
	NodeFilterKeyOrganizationalUnitPath NodeFilterKey = "OrganizationalUnitPath"
	NodeFilterKeyRegion                 NodeFilterKey = "Region"
	NodeFilterKeyAccountId              NodeFilterKey = "AccountId"
)

// Values returns all known values for NodeFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NodeFilterKey) Values() []NodeFilterKey {
	return []NodeFilterKey{
		"AgentType",
		"AgentVersion",
		"ComputerName",
		"InstanceId",
		"InstanceStatus",
		"IpAddress",
		"ManagedStatus",
		"PlatformName",
		"PlatformType",
		"PlatformVersion",
		"ResourceType",
		"OrganizationalUnitId",
		"OrganizationalUnitPath",
		"Region",
		"AccountId",
	}
}

type NodeFilterOperatorType string

// Enum values for NodeFilterOperatorType
const (
	NodeFilterOperatorTypeEqual     NodeFilterOperatorType = "Equal"
	NodeFilterOperatorTypeNotEqual  NodeFilterOperatorType = "NotEqual"
	NodeFilterOperatorTypeBeginWith NodeFilterOperatorType = "BeginWith"
)

// Values returns all known values for NodeFilterOperatorType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NodeFilterOperatorType) Values() []NodeFilterOperatorType {
	return []NodeFilterOperatorType{
		"Equal",
		"NotEqual",
		"BeginWith",
	}
}

type NodeTypeName string

// Enum values for NodeTypeName
const (
	NodeTypeNameInstance NodeTypeName = "Instance"
)

// Values returns all known values for NodeTypeName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NodeTypeName) Values() []NodeTypeName {
	return []NodeTypeName{
		"Instance",
	}
}

type NotificationEvent string

// Enum values for NotificationEvent
const (
	NotificationEventAll        NotificationEvent = "All"
	NotificationEventInProgress NotificationEvent = "InProgress"
	NotificationEventSuccess    NotificationEvent = "Success"
	NotificationEventTimedOut   NotificationEvent = "TimedOut"
	NotificationEventCancelled  NotificationEvent = "Cancelled"
	NotificationEventFailed     NotificationEvent = "Failed"
)

// Values returns all known values for NotificationEvent. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NotificationEvent) Values() []NotificationEvent {
	return []NotificationEvent{
		"All",
		"InProgress",
		"Success",
		"TimedOut",
		"Cancelled",
		"Failed",
	}
}

type NotificationType string

// Enum values for NotificationType
const (
	NotificationTypeCommand    NotificationType = "Command"
	NotificationTypeInvocation NotificationType = "Invocation"
)

// Values returns all known values for NotificationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NotificationType) Values() []NotificationType {
	return []NotificationType{
		"Command",
		"Invocation",
	}
}

type OperatingSystem string

// Enum values for OperatingSystem
const (
	OperatingSystemWindows               OperatingSystem = "WINDOWS"
	OperatingSystemAmazonLinux           OperatingSystem = "AMAZON_LINUX"
	OperatingSystemAmazonLinux2          OperatingSystem = "AMAZON_LINUX_2"
	OperatingSystemAmazonLinux2022       OperatingSystem = "AMAZON_LINUX_2022"
	OperatingSystemUbuntu                OperatingSystem = "UBUNTU"
	OperatingSystemRedhatEnterpriseLinux OperatingSystem = "REDHAT_ENTERPRISE_LINUX"
	OperatingSystemSuse                  OperatingSystem = "SUSE"
	OperatingSystemCentOS                OperatingSystem = "CENTOS"
	OperatingSystemOracleLinux           OperatingSystem = "ORACLE_LINUX"
	OperatingSystemDebian                OperatingSystem = "DEBIAN"
	OperatingSystemMacOS                 OperatingSystem = "MACOS"
	OperatingSystemRaspbian              OperatingSystem = "RASPBIAN"
	OperatingSystemRockyLinux            OperatingSystem = "ROCKY_LINUX"
	OperatingSystemAlmaLinux             OperatingSystem = "ALMA_LINUX"
	OperatingSystemAmazonLinux2023       OperatingSystem = "AMAZON_LINUX_2023"
)

// Values returns all known values for OperatingSystem. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OperatingSystem) Values() []OperatingSystem {
	return []OperatingSystem{
		"WINDOWS",
		"AMAZON_LINUX",
		"AMAZON_LINUX_2",
		"AMAZON_LINUX_2022",
		"UBUNTU",
		"REDHAT_ENTERPRISE_LINUX",
		"SUSE",
		"CENTOS",
		"ORACLE_LINUX",
		"DEBIAN",
		"MACOS",
		"RASPBIAN",
		"ROCKY_LINUX",
		"ALMA_LINUX",
		"AMAZON_LINUX_2023",
	}
}

type OpsFilterOperatorType string

// Enum values for OpsFilterOperatorType
const (
	OpsFilterOperatorTypeEqual       OpsFilterOperatorType = "Equal"
	OpsFilterOperatorTypeNotEqual    OpsFilterOperatorType = "NotEqual"
	OpsFilterOperatorTypeBeginWith   OpsFilterOperatorType = "BeginWith"
	OpsFilterOperatorTypeLessThan    OpsFilterOperatorType = "LessThan"
	OpsFilterOperatorTypeGreaterThan OpsFilterOperatorType = "GreaterThan"
	OpsFilterOperatorTypeExists      OpsFilterOperatorType = "Exists"
)

// Values returns all known values for OpsFilterOperatorType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsFilterOperatorType) Values() []OpsFilterOperatorType {
	return []OpsFilterOperatorType{
		"Equal",
		"NotEqual",
		"BeginWith",
		"LessThan",
		"GreaterThan",
		"Exists",
	}
}

type OpsItemDataType string

// Enum values for OpsItemDataType
const (
	OpsItemDataTypeSearchableString OpsItemDataType = "SearchableString"
	OpsItemDataTypeString           OpsItemDataType = "String"
)

// Values returns all known values for OpsItemDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemDataType) Values() []OpsItemDataType {
	return []OpsItemDataType{
		"SearchableString",
		"String",
	}
}

type OpsItemEventFilterKey string

// Enum values for OpsItemEventFilterKey
const (
	OpsItemEventFilterKeyOpsitemId OpsItemEventFilterKey = "OpsItemId"
)

// Values returns all known values for OpsItemEventFilterKey. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemEventFilterKey) Values() []OpsItemEventFilterKey {
	return []OpsItemEventFilterKey{
		"OpsItemId",
	}
}

type OpsItemEventFilterOperator string

// Enum values for OpsItemEventFilterOperator
const (
	OpsItemEventFilterOperatorEqual OpsItemEventFilterOperator = "Equal"
)

// Values returns all known values for OpsItemEventFilterOperator. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemEventFilterOperator) Values() []OpsItemEventFilterOperator {
	return []OpsItemEventFilterOperator{
		"Equal",
	}
}

type OpsItemFilterKey string

// Enum values for OpsItemFilterKey
const (
	OpsItemFilterKeyStatus                            OpsItemFilterKey = "Status"
	OpsItemFilterKeyCreatedBy                         OpsItemFilterKey = "CreatedBy"
	OpsItemFilterKeySource                            OpsItemFilterKey = "Source"
	OpsItemFilterKeyPriority                          OpsItemFilterKey = "Priority"
	OpsItemFilterKeyTitle                             OpsItemFilterKey = "Title"
	OpsItemFilterKeyOpsitemId                         OpsItemFilterKey = "OpsItemId"
	OpsItemFilterKeyCreatedTime                       OpsItemFilterKey = "CreatedTime"
	OpsItemFilterKeyLastModifiedTime                  OpsItemFilterKey = "LastModifiedTime"
	OpsItemFilterKeyActualStartTime                   OpsItemFilterKey = "ActualStartTime"
	OpsItemFilterKeyActualEndTime                     OpsItemFilterKey = "ActualEndTime"
	OpsItemFilterKeyPlannedStartTime                  OpsItemFilterKey = "PlannedStartTime"
	OpsItemFilterKeyPlannedEndTime                    OpsItemFilterKey = "PlannedEndTime"
	OpsItemFilterKeyOperationalData                   OpsItemFilterKey = "OperationalData"
	OpsItemFilterKeyOperationalDataKey                OpsItemFilterKey = "OperationalDataKey"
	OpsItemFilterKeyOperationalDataValue              OpsItemFilterKey = "OperationalDataValue"
	OpsItemFilterKeyResourceId                        OpsItemFilterKey = "ResourceId"
	OpsItemFilterKeyAutomationId                      OpsItemFilterKey = "AutomationId"
	OpsItemFilterKeyCategory                          OpsItemFilterKey = "Category"
	OpsItemFilterKeySeverity                          OpsItemFilterKey = "Severity"
	OpsItemFilterKeyOpsitemType                       OpsItemFilterKey = "OpsItemType"
	OpsItemFilterKeyChangeRequestRequesterArn         OpsItemFilterKey = "ChangeRequestByRequesterArn"
	OpsItemFilterKeyChangeRequestRequesterName        OpsItemFilterKey = "ChangeRequestByRequesterName"
	OpsItemFilterKeyChangeRequestApproverArn          OpsItemFilterKey = "ChangeRequestByApproverArn"
	OpsItemFilterKeyChangeRequestApproverName         OpsItemFilterKey = "ChangeRequestByApproverName"
	OpsItemFilterKeyChangeRequestTemplate             OpsItemFilterKey = "ChangeRequestByTemplate"
	OpsItemFilterKeyChangeRequestTargetsResourceGroup OpsItemFilterKey = "ChangeRequestByTargetsResourceGroup"
	OpsItemFilterKeyInsightType                       OpsItemFilterKey = "InsightByType"
	OpsItemFilterKeyAccountId                         OpsItemFilterKey = "AccountId"
)

// Values returns all known values for OpsItemFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemFilterKey) Values() []OpsItemFilterKey {
	return []OpsItemFilterKey{
		"Status",
		"CreatedBy",
		"Source",
		"Priority",
		"Title",
		"OpsItemId",
		"CreatedTime",
		"LastModifiedTime",
		"ActualStartTime",
		"ActualEndTime",
		"PlannedStartTime",
		"PlannedEndTime",
		"OperationalData",
		"OperationalDataKey",
		"OperationalDataValue",
		"ResourceId",
		"AutomationId",
		"Category",
		"Severity",
		"OpsItemType",
		"ChangeRequestByRequesterArn",
		"ChangeRequestByRequesterName",
		"ChangeRequestByApproverArn",
		"ChangeRequestByApproverName",
		"ChangeRequestByTemplate",
		"ChangeRequestByTargetsResourceGroup",
		"InsightByType",
		"AccountId",
	}
}

type OpsItemFilterOperator string

// Enum values for OpsItemFilterOperator
const (
	OpsItemFilterOperatorEqual       OpsItemFilterOperator = "Equal"
	OpsItemFilterOperatorContains    OpsItemFilterOperator = "Contains"
	OpsItemFilterOperatorGreaterThan OpsItemFilterOperator = "GreaterThan"
	OpsItemFilterOperatorLessThan    OpsItemFilterOperator = "LessThan"
)

// Values returns all known values for OpsItemFilterOperator. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemFilterOperator) Values() []OpsItemFilterOperator {
	return []OpsItemFilterOperator{
		"Equal",
		"Contains",
		"GreaterThan",
		"LessThan",
	}
}

type OpsItemRelatedItemsFilterKey string

// Enum values for OpsItemRelatedItemsFilterKey
const (
	OpsItemRelatedItemsFilterKeyResourceType  OpsItemRelatedItemsFilterKey = "ResourceType"
	OpsItemRelatedItemsFilterKeyAssociationId OpsItemRelatedItemsFilterKey = "AssociationId"
	OpsItemRelatedItemsFilterKeyResourceUri   OpsItemRelatedItemsFilterKey = "ResourceUri"
)

// Values returns all known values for OpsItemRelatedItemsFilterKey. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemRelatedItemsFilterKey) Values() []OpsItemRelatedItemsFilterKey {
	return []OpsItemRelatedItemsFilterKey{
		"ResourceType",
		"AssociationId",
		"ResourceUri",
	}
}

type OpsItemRelatedItemsFilterOperator string

// Enum values for OpsItemRelatedItemsFilterOperator
const (
	OpsItemRelatedItemsFilterOperatorEqual OpsItemRelatedItemsFilterOperator = "Equal"
)

// Values returns all known values for OpsItemRelatedItemsFilterOperator. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemRelatedItemsFilterOperator) Values() []OpsItemRelatedItemsFilterOperator {
	return []OpsItemRelatedItemsFilterOperator{
		"Equal",
	}
}

type OpsItemStatus string

// Enum values for OpsItemStatus
const (
	OpsItemStatusOpen                           OpsItemStatus = "Open"
	OpsItemStatusInProgress                     OpsItemStatus = "InProgress"
	OpsItemStatusResolved                       OpsItemStatus = "Resolved"
	OpsItemStatusPending                        OpsItemStatus = "Pending"
	OpsItemStatusTimedOut                       OpsItemStatus = "TimedOut"
	OpsItemStatusCancelling                     OpsItemStatus = "Cancelling"
	OpsItemStatusCancelled                      OpsItemStatus = "Cancelled"
	OpsItemStatusFailed                         OpsItemStatus = "Failed"
	OpsItemStatusCompletedWithSuccess           OpsItemStatus = "CompletedWithSuccess"
	OpsItemStatusCompletedWithFailure           OpsItemStatus = "CompletedWithFailure"
	OpsItemStatusScheduled                      OpsItemStatus = "Scheduled"
	OpsItemStatusRunbookInProgress              OpsItemStatus = "RunbookInProgress"
	OpsItemStatusPendingChangeCalendarOverride  OpsItemStatus = "PendingChangeCalendarOverride"
	OpsItemStatusChangeCalendarOverrideApproved OpsItemStatus = "ChangeCalendarOverrideApproved"
	OpsItemStatusChangeCalendarOverrideRejected OpsItemStatus = "ChangeCalendarOverrideRejected"
	OpsItemStatusPendingApproval                OpsItemStatus = "PendingApproval"
	OpsItemStatusApproved                       OpsItemStatus = "Approved"
	OpsItemStatusRejected                       OpsItemStatus = "Rejected"
	OpsItemStatusClosed                         OpsItemStatus = "Closed"
)

// Values returns all known values for OpsItemStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemStatus) Values() []OpsItemStatus {
	return []OpsItemStatus{
		"Open",
		"InProgress",
		"Resolved",
		"Pending",
		"TimedOut",
		"Cancelling",
		"Cancelled",
		"Failed",
		"CompletedWithSuccess",
		"CompletedWithFailure",
		"Scheduled",
		"RunbookInProgress",
		"PendingChangeCalendarOverride",
		"ChangeCalendarOverrideApproved",
		"ChangeCalendarOverrideRejected",
		"PendingApproval",
		"Approved",
		"Rejected",
		"Closed",
	}
}

type ParametersFilterKey string

// Enum values for ParametersFilterKey
const (
	ParametersFilterKeyName  ParametersFilterKey = "Name"
	ParametersFilterKeyType  ParametersFilterKey = "Type"
	ParametersFilterKeyKeyId ParametersFilterKey = "KeyId"
)

// Values returns all known values for ParametersFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParametersFilterKey) Values() []ParametersFilterKey {
	return []ParametersFilterKey{
		"Name",
		"Type",
		"KeyId",
	}
}

type ParameterTier string

// Enum values for ParameterTier
const (
	ParameterTierStandard           ParameterTier = "Standard"
	ParameterTierAdvanced           ParameterTier = "Advanced"
	ParameterTierIntelligentTiering ParameterTier = "Intelligent-Tiering"
)

// Values returns all known values for ParameterTier. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParameterTier) Values() []ParameterTier {
	return []ParameterTier{
		"Standard",
		"Advanced",
		"Intelligent-Tiering",
	}
}

type ParameterType string

// Enum values for ParameterType
const (
	ParameterTypeString       ParameterType = "String"
	ParameterTypeStringList   ParameterType = "StringList"
	ParameterTypeSecureString ParameterType = "SecureString"
)

// Values returns all known values for ParameterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParameterType) Values() []ParameterType {
	return []ParameterType{
		"String",
		"StringList",
		"SecureString",
	}
}

type PatchAction string

// Enum values for PatchAction
const (
	PatchActionAllowAsDependency PatchAction = "ALLOW_AS_DEPENDENCY"
	PatchActionBlock             PatchAction = "BLOCK"
)

// Values returns all known values for PatchAction. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchAction) Values() []PatchAction {
	return []PatchAction{
		"ALLOW_AS_DEPENDENCY",
		"BLOCK",
	}
}

type PatchComplianceDataState string

// Enum values for PatchComplianceDataState
const (
	PatchComplianceDataStateInstalled               PatchComplianceDataState = "INSTALLED"
	PatchComplianceDataStateInstalledOther          PatchComplianceDataState = "INSTALLED_OTHER"
	PatchComplianceDataStateInstalledPendingReboot  PatchComplianceDataState = "INSTALLED_PENDING_REBOOT"
	PatchComplianceDataStateInstalledRejected       PatchComplianceDataState = "INSTALLED_REJECTED"
	PatchComplianceDataStateMissing                 PatchComplianceDataState = "MISSING"
	PatchComplianceDataStateNotApplicable           PatchComplianceDataState = "NOT_APPLICABLE"
	PatchComplianceDataStateFailed                  PatchComplianceDataState = "FAILED"
	PatchComplianceDataStateAvailableSecurityUpdate PatchComplianceDataState = "AVAILABLE_SECURITY_UPDATE"
)

// Values returns all known values for PatchComplianceDataState. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchComplianceDataState) Values() []PatchComplianceDataState {
	return []PatchComplianceDataState{
		"INSTALLED",
		"INSTALLED_OTHER",
		"INSTALLED_PENDING_REBOOT",
		"INSTALLED_REJECTED",
		"MISSING",
		"NOT_APPLICABLE",
		"FAILED",
		"AVAILABLE_SECURITY_UPDATE",
	}
}

type PatchComplianceLevel string

// Enum values for PatchComplianceLevel
const (
	PatchComplianceLevelCritical      PatchComplianceLevel = "CRITICAL"
	PatchComplianceLevelHigh          PatchComplianceLevel = "HIGH"
	PatchComplianceLevelMedium        PatchComplianceLevel = "MEDIUM"
	PatchComplianceLevelLow           PatchComplianceLevel = "LOW"
	PatchComplianceLevelInformational PatchComplianceLevel = "INFORMATIONAL"
	PatchComplianceLevelUnspecified   PatchComplianceLevel = "UNSPECIFIED"
)

// Values returns all known values for PatchComplianceLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchComplianceLevel) Values() []PatchComplianceLevel {
	return []PatchComplianceLevel{
		"CRITICAL",
		"HIGH",
		"MEDIUM",
		"LOW",
		"INFORMATIONAL",
		"UNSPECIFIED",
	}
}

type PatchComplianceStatus string

// Enum values for PatchComplianceStatus
const (
	PatchComplianceStatusCompliant    PatchComplianceStatus = "COMPLIANT"
	PatchComplianceStatusNonCompliant PatchComplianceStatus = "NON_COMPLIANT"
)

// Values returns all known values for PatchComplianceStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchComplianceStatus) Values() []PatchComplianceStatus {
	return []PatchComplianceStatus{
		"COMPLIANT",
		"NON_COMPLIANT",
	}
}

type PatchDeploymentStatus string

// Enum values for PatchDeploymentStatus
const (
	PatchDeploymentStatusApproved         PatchDeploymentStatus = "APPROVED"
	PatchDeploymentStatusPendingApproval  PatchDeploymentStatus = "PENDING_APPROVAL"
	PatchDeploymentStatusExplicitApproved PatchDeploymentStatus = "EXPLICIT_APPROVED"
	PatchDeploymentStatusExplicitRejected PatchDeploymentStatus = "EXPLICIT_REJECTED"
)

// Values returns all known values for PatchDeploymentStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchDeploymentStatus) Values() []PatchDeploymentStatus {
	return []PatchDeploymentStatus{
		"APPROVED",
		"PENDING_APPROVAL",
		"EXPLICIT_APPROVED",
		"EXPLICIT_REJECTED",
	}
}

type PatchFilterKey string

// Enum values for PatchFilterKey
const (
	PatchFilterKeyArch           PatchFilterKey = "ARCH"
	PatchFilterKeyAdvisoryId     PatchFilterKey = "ADVISORY_ID"
	PatchFilterKeyBugzillaId     PatchFilterKey = "BUGZILLA_ID"
	PatchFilterKeyPatchSet       PatchFilterKey = "PATCH_SET"
	PatchFilterKeyProduct        PatchFilterKey = "PRODUCT"
	PatchFilterKeyProductFamily  PatchFilterKey = "PRODUCT_FAMILY"
	PatchFilterKeyClassification PatchFilterKey = "CLASSIFICATION"
	PatchFilterKeyCVEId          PatchFilterKey = "CVE_ID"
	PatchFilterKeyEpoch          PatchFilterKey = "EPOCH"
	PatchFilterKeyMsrcSeverity   PatchFilterKey = "MSRC_SEVERITY"
	PatchFilterKeyName           PatchFilterKey = "NAME"
	PatchFilterKeyPatchId        PatchFilterKey = "PATCH_ID"
	PatchFilterKeySection        PatchFilterKey = "SECTION"
	PatchFilterKeyPriority       PatchFilterKey = "PRIORITY"
	PatchFilterKeyRepository     PatchFilterKey = "REPOSITORY"
	PatchFilterKeyRelease        PatchFilterKey = "RELEASE"
	PatchFilterKeySeverity       PatchFilterKey = "SEVERITY"
	PatchFilterKeySecurity       PatchFilterKey = "SECURITY"
	PatchFilterKeyVersion        PatchFilterKey = "VERSION"
)

// Values returns all known values for PatchFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchFilterKey) Values() []PatchFilterKey {
	return []PatchFilterKey{
		"ARCH",
		"ADVISORY_ID",
		"BUGZILLA_ID",
		"PATCH_SET",
		"PRODUCT",
		"PRODUCT_FAMILY",
		"CLASSIFICATION",
		"CVE_ID",
		"EPOCH",
		"MSRC_SEVERITY",
		"NAME",
		"PATCH_ID",
		"SECTION",
		"PRIORITY",
		"REPOSITORY",
		"RELEASE",
		"SEVERITY",
		"SECURITY",
		"VERSION",
	}
}

type PatchOperationType string

// Enum values for PatchOperationType
const (
	PatchOperationTypeScan    PatchOperationType = "Scan"
	PatchOperationTypeInstall PatchOperationType = "Install"
)

// Values returns all known values for PatchOperationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchOperationType) Values() []PatchOperationType {
	return []PatchOperationType{
		"Scan",
		"Install",
	}
}

type PatchProperty string

// Enum values for PatchProperty
const (
	PatchPropertyProduct             PatchProperty = "PRODUCT"
	PatchPropertyPatchProductFamily  PatchProperty = "PRODUCT_FAMILY"
	PatchPropertyPatchClassification PatchProperty = "CLASSIFICATION"
	PatchPropertyPatchMsrcSeverity   PatchProperty = "MSRC_SEVERITY"
	PatchPropertyPatchPriority       PatchProperty = "PRIORITY"
	PatchPropertyPatchSeverity       PatchProperty = "SEVERITY"
)

// Values returns all known values for PatchProperty. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchProperty) Values() []PatchProperty {
	return []PatchProperty{
		"PRODUCT",
		"PRODUCT_FAMILY",
		"CLASSIFICATION",
		"MSRC_SEVERITY",
		"PRIORITY",
		"SEVERITY",
	}
}

type PatchSet string

// Enum values for PatchSet
const (
	PatchSetOs          PatchSet = "OS"
	PatchSetApplication PatchSet = "APPLICATION"
)

// Values returns all known values for PatchSet. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PatchSet) Values() []PatchSet {
	return []PatchSet{
		"OS",
		"APPLICATION",
	}
}

type PingStatus string

// Enum values for PingStatus
const (
	PingStatusOnline         PingStatus = "Online"
	PingStatusConnectionLost PingStatus = "ConnectionLost"
	PingStatusInactive       PingStatus = "Inactive"
)

// Values returns all known values for PingStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PingStatus) Values() []PingStatus {
	return []PingStatus{
		"Online",
		"ConnectionLost",
		"Inactive",
	}
}

type PlatformType string

// Enum values for PlatformType
const (
	PlatformTypeWindows PlatformType = "Windows"
	PlatformTypeLinux   PlatformType = "Linux"
	PlatformTypeMacos   PlatformType = "MacOS"
)

// Values returns all known values for PlatformType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PlatformType) Values() []PlatformType {
	return []PlatformType{
		"Windows",
		"Linux",
		"MacOS",
	}
}

type RebootOption string

// Enum values for RebootOption
const (
	RebootOptionRebootIfNeeded RebootOption = "RebootIfNeeded"
	RebootOptionNoReboot       RebootOption = "NoReboot"
)

// Values returns all known values for RebootOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RebootOption) Values() []RebootOption {
	return []RebootOption{
		"RebootIfNeeded",
		"NoReboot",
	}
}

type ResourceDataSyncS3Format string

// Enum values for ResourceDataSyncS3Format
const (
	ResourceDataSyncS3FormatJsonSerde ResourceDataSyncS3Format = "JsonSerDe"
)

// Values returns all known values for ResourceDataSyncS3Format. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceDataSyncS3Format) Values() []ResourceDataSyncS3Format {
	return []ResourceDataSyncS3Format{
		"JsonSerDe",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeManagedInstance ResourceType = "ManagedInstance"
	ResourceTypeEc2Instance     ResourceType = "EC2Instance"
)

// Values returns all known values for ResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"ManagedInstance",
		"EC2Instance",
	}
}

type ResourceTypeForTagging string

// Enum values for ResourceTypeForTagging
const (
	ResourceTypeForTaggingDocument          ResourceTypeForTagging = "Document"
	ResourceTypeForTaggingManagedInstance   ResourceTypeForTagging = "ManagedInstance"
	ResourceTypeForTaggingMaintenanceWindow ResourceTypeForTagging = "MaintenanceWindow"
	ResourceTypeForTaggingParameter         ResourceTypeForTagging = "Parameter"
	ResourceTypeForTaggingPatchBaseline     ResourceTypeForTagging = "PatchBaseline"
	ResourceTypeForTaggingOpsItem           ResourceTypeForTagging = "OpsItem"
	ResourceTypeForTaggingOpsmetadata       ResourceTypeForTagging = "OpsMetadata"
	ResourceTypeForTaggingAutomation        ResourceTypeForTagging = "Automation"
	ResourceTypeForTaggingAssociation       ResourceTypeForTagging = "Association"
)

// Values returns all known values for ResourceTypeForTagging. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceTypeForTagging) Values() []ResourceTypeForTagging {
	return []ResourceTypeForTagging{
		"Document",
		"ManagedInstance",
		"MaintenanceWindow",
		"Parameter",
		"PatchBaseline",
		"OpsItem",
		"OpsMetadata",
		"Automation",
		"Association",
	}
}

type ReviewStatus string

// Enum values for ReviewStatus
const (
	ReviewStatusApproved    ReviewStatus = "APPROVED"
	ReviewStatusNotReviewed ReviewStatus = "NOT_REVIEWED"
	ReviewStatusPending     ReviewStatus = "PENDING"
	ReviewStatusRejected    ReviewStatus = "REJECTED"
)

// Values returns all known values for ReviewStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReviewStatus) Values() []ReviewStatus {
	return []ReviewStatus{
		"APPROVED",
		"NOT_REVIEWED",
		"PENDING",
		"REJECTED",
	}
}

type SessionFilterKey string

// Enum values for SessionFilterKey
const (
	SessionFilterKeyInvokedAfter  SessionFilterKey = "InvokedAfter"
	SessionFilterKeyInvokedBefore SessionFilterKey = "InvokedBefore"
	SessionFilterKeyTargetId      SessionFilterKey = "Target"
	SessionFilterKeyOwner         SessionFilterKey = "Owner"
	SessionFilterKeyStatus        SessionFilterKey = "Status"
	SessionFilterKeySessionId     SessionFilterKey = "SessionId"
)

// Values returns all known values for SessionFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SessionFilterKey) Values() []SessionFilterKey {
	return []SessionFilterKey{
		"InvokedAfter",
		"InvokedBefore",
		"Target",
		"Owner",
		"Status",
		"SessionId",
	}
}

type SessionState string

// Enum values for SessionState
const (
	SessionStateActive  SessionState = "Active"
	SessionStateHistory SessionState = "History"
)

// Values returns all known values for SessionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SessionState) Values() []SessionState {
	return []SessionState{
		"Active",
		"History",
	}
}

type SessionStatus string

// Enum values for SessionStatus
const (
	SessionStatusConnected    SessionStatus = "Connected"
	SessionStatusConnecting   SessionStatus = "Connecting"
	SessionStatusDisconnected SessionStatus = "Disconnected"
	SessionStatusTerminated   SessionStatus = "Terminated"
	SessionStatusTerminating  SessionStatus = "Terminating"
	SessionStatusFailed       SessionStatus = "Failed"
)

// Values returns all known values for SessionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SessionStatus) Values() []SessionStatus {
	return []SessionStatus{
		"Connected",
		"Connecting",
		"Disconnected",
		"Terminated",
		"Terminating",
		"Failed",
	}
}

type SignalType string

// Enum values for SignalType
const (
	SignalTypeApprove   SignalType = "Approve"
	SignalTypeReject    SignalType = "Reject"
	SignalTypeStartStep SignalType = "StartStep"
	SignalTypeStopStep  SignalType = "StopStep"
	SignalTypeResume    SignalType = "Resume"
)

// Values returns all known values for SignalType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SignalType) Values() []SignalType {
	return []SignalType{
		"Approve",
		"Reject",
		"StartStep",
		"StopStep",
		"Resume",
	}
}

type SourceType string

// Enum values for SourceType
const (
	SourceTypeAwsEc2Instance        SourceType = "AWS::EC2::Instance"
	SourceTypeAwsIotThing           SourceType = "AWS::IoT::Thing"
	SourceTypeAwsSsmManagedinstance SourceType = "AWS::SSM::ManagedInstance"
)

// Values returns all known values for SourceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SourceType) Values() []SourceType {
	return []SourceType{
		"AWS::EC2::Instance",
		"AWS::IoT::Thing",
		"AWS::SSM::ManagedInstance",
	}
}

type StepExecutionFilterKey string

// Enum values for StepExecutionFilterKey
const (
	StepExecutionFilterKeyStartTimeBefore         StepExecutionFilterKey = "StartTimeBefore"
	StepExecutionFilterKeyStartTimeAfter          StepExecutionFilterKey = "StartTimeAfter"
	StepExecutionFilterKeyStepExecutionStatus     StepExecutionFilterKey = "StepExecutionStatus"
	StepExecutionFilterKeyStepExecutionId         StepExecutionFilterKey = "StepExecutionId"
	StepExecutionFilterKeyStepName                StepExecutionFilterKey = "StepName"
	StepExecutionFilterKeyAction                  StepExecutionFilterKey = "Action"
	StepExecutionFilterKeyParentStepExecutionId   StepExecutionFilterKey = "ParentStepExecutionId"
	StepExecutionFilterKeyParentStepIteration     StepExecutionFilterKey = "ParentStepIteration"
	StepExecutionFilterKeyParentStepIteratorValue StepExecutionFilterKey = "ParentStepIteratorValue"
)

// Values returns all known values for StepExecutionFilterKey. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StepExecutionFilterKey) Values() []StepExecutionFilterKey {
	return []StepExecutionFilterKey{
		"StartTimeBefore",
		"StartTimeAfter",
		"StepExecutionStatus",
		"StepExecutionId",
		"StepName",
		"Action",
		"ParentStepExecutionId",
		"ParentStepIteration",
		"ParentStepIteratorValue",
	}
}

type StopType string

// Enum values for StopType
const (
	StopTypeComplete StopType = "Complete"
	StopTypeCancel   StopType = "Cancel"
)

// Values returns all known values for StopType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StopType) Values() []StopType {
	return []StopType{
		"Complete",
		"Cancel",
	}
}
